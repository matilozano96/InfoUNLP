Uso basico, sintaxis, programa modelo

```
programa name
procesos
	proceso name (E/ES name: type; E name: type)
	variables
		name: type
		name: type
	comenzar
	
	fin
	
areas
	; Privada: un Robot; Compartida: todos los robots; PC: subconjunto de robots
	name: tipo(coords)
	areaCompartida: AreaC(inicio x, inicio y, fin x, fin y)
	areaPrivada: AreaP(1, 1, 100, 100)
	areaParcialmenteCompartida: AreaPC(x,y,x,y)
	
robots
	robot tipo1
	variables
		id: numero
		num: numero
		b: boolean	
		ca: numero
		av: numero
		
	comenzar
		RecibirMensaje(num, robotNombre) ; Se tiene que declarar la variable recibida. El segundo argumento es de quien se espera el mensaje
		ca:= PosCa
		av:= PosAv ; Se asigna como en Pascal
		
		RecibirMensaje(num2, *) ; * implica esperar mensaje de cualquiera
		
		mientras(condicion) ; while loop
			Random(res, vbajo, valto) ; genera un numero entre vbajo y valto y lo almacena en res
			Pos(av,ca) ; Es buena practica guardar la posicion de origen para regresar al final
			
		EnviarMensaje(num2, robotJefe) ; se puede enviar cualquier numero (no se si un boolean tambien)
	fin
	
	robot jefe
	variables
	
	comenzar
		EnviarMensaje(1, robot1) ; El jefe envia ids a los otros para que puedan identificarse despues. Esto los inicializa
		EnviarMensaje(2, robot2)
		
		si(condicion)
			proc(var)
		sino
			si(condicion)
				proc(var)
			sino(condicion)
				proc(var)
 	fin
	
variables ; Se declaran los robots a usar
	robot1: tipo1
	robot2: tipo1
	robotJefe: jefe ; notese que en los scripts de los robots se usa el nombre de la variable, no el tipo
	
comenzar
	AsignarArea(robot, area) ; EJ
	AsignarArea(robot1, areaPrivada)
	AsignarArea(robot1, areaCompartida)
	AsignarArea(robot2, areaCompartida)
	AsignarArea(robotJefe, areaCompartida)
	AsignarArea(robot2, areaParcialmenteCompartida)
	AsignarArea(robotJefe, areaParcialmenteCompartida)
	
	Iniciar(robot, avInicial, caInicial)
fin
```

Para bloquear una celda:
```
	BloquearEsquina(av, ca)
	pos(av,ca)
	hacerCosas()
	pos(noAv,noCa)
	LiberarEsquina(av,ca)
	
	; Lo importante es bloquear antes de entrar y desbloquear despues de salir
```

Funciones comunes
Random: Genera un integer al azar entre min y max y lo almacena en la variable var
``` random(var, min, max) ``` 

ProcesarEsquina(sin mover): subproceso para realizar las operaciones dentro de una unica esquina. De esta manera se ordena el movimiento y el proceso de esquinas por separado, mas ordenadamente.
```
proceso procesarEsquina()
	comenzar
		cosas()
		masCosas()
	fin

proceso main()
	comenzar
		repetir 50
			procesarEsquina()
			mover
	fin
```

Para girar a la izquierda:
```
proceso izquierda()
	comenzar
		repetir 3
			derecha
	fin
```

Para moverse un escalon de x por y
```
proceso escalon(E x:numero; E y:numero)
	comenzar
		repetir x
			mover
		derecha
		
		repetir y
			mover
		izquierda()
	fin
```

Para moverse a lo largo de un rectangulo de x por y
```
proceso rect(E x: numero; E y: numero)
	comenzar
		repetir 2
			repetir x
				mover
			derecha
			repetir y
				mover
			derecha
	fin
```

Para levantar flores/papeles y tomar registro, 
```
proceso limpiarPapeles(ES papeles:numero)
  comenzar
    mientras(HayPapelEnLaEsquina)
      tomarPapel
      papeles:=papeles+1
  fin
  
proceso limpiarFlores(ES flores:numero)
  comenzar
    mientras(HayFlorEnLaEsquina)
      tomarFlor
      flores:=flores+1
  fin
  
proceso limpiarEsquina(ES total:numero)
  variables
    papeles:numero
    flores:numero
  comenzar
    papeles:=0
    flores:=0
    si(HayFlorEnLaEsquina)
      limpiarFlores(flores)
    si(HayPapelEnLaEsquina)
      limpiarPapeles(papeles)
    total:=flores+papeles  
  fin
```

Para CONTAR flores/papeles y dejarlos donde se los encontro:
```
proceso contarPapeles(ES papeles:numero)
  comenzar
    mientras(HayPapelEnLaEsquina)
      tomarPapel
      papeles:=papeles+1
	mientras(HayPapelEnLaBolsa)
	  depositarPapel
  fin
  
proceso contarFlores(ES flores:numero)
  comenzar
    mientras(HayFlorEnLaEsquina)
      tomarFlor
      flores:=flores+1
	mientras(HayFlorEnLaBolsa)
	  depositarFlor
  fin
  
proceso contarEsquina(ES total:numero)
  variables
    papeles:numero
    flores:numero
  comenzar
    papeles:=0
    flores:=0
    si(HayFlorEnLaEsquina)
      limpiarFlores(flores)
    si(HayPapelEnLaEsquina)
      limpiarPapeles(papeles)
    total:=flores+papeles  
	Informar(total) ; Mensaje a consola con el valor de una variable
  fin
```

Para coordinar robots (llamada por jefe):
Recordar que el ENVIO de mensajes no frena al robot que envia, pero la RECEPCION de mensajes si.

Es decir, el robot no espera tras enviar, pero espera para recibir
```
proceso mandarCod(E id: numero; E cod: numero) 
; se usa el id para diferenciar entre robots
; cod es cualquier numero que se quiera enviar al robot en cuestion
comenzar
	si(id=1)
	  EnviarMensaje(cod,robot1)
	sino
	  si(id=2)
	  	EnviarMensaje(cod,robot2)
	  sino
	  	...
fin
```

Ejemplo de comunicacion hacia el jefe
```
robot r1
comenzar
	RecibirMensaje(quienSoy, Jefe)
	...
	EnviarMensaje(quienSoy, Jefe)
	EnviarMensaje(valor, Jefe)
fin
```

Recepcion del lado del jefe
```
	EnviarMensaje(1, robot1)
	EnviarMensaje(2, robot2)
	
	RecibirMensaje(numRobot, *)
	si (numRobot) = 1
		RecibirMensaje(valor, robot1)
		procesar(valor)...
	sino 
		si (numRobot) = 2
			RecibirMensaje(valor,robot2)
			procesar(valor)...
			
	etc...
```


Sintaxis
```
Sintaxis a resaltar de R-Info 
Operadores: / := ~ | & <> > < = + - * 

Control: si(condicion) 
		 sino 
		 mientras(condicion)
		 repetir integer
		 
Seccion: programa
		 procesos 
		 proceso 
		 variables 
		 areas 
		 robots 
		 robot 
		 
Funcion: boolean: HayFlorEnLaEsquina
		 		  HayPapelEnLaEsquina 
		 		  HayFlorEnLaBolsa 
		 		  HayPapelEnLaBolsa 
		 int: PosAv 
			  PosCa 
			  
Procedimiento: Pos (av, ca)
			   mover 
			   derecha 
			   tomarFlor 
			   tomarPapel 
			   depositarFlor 
			   depositarPapel 
			   AsignarArea(robot, area)
			   Iniciar(robot, avInicial, caInicial) 
			   Informar(var)
			   Random(var, min, max)

Tipo de dato: ES E boolean numero AreaC AreaPC AreaP 

Crear bloque de codigo: comenzar fin 

Comunicacion: 
			EnviarMensaje (var, robot)
			RecibirMensaje (var, robot)
			BloquearEsquina (av,ca)
			LiberarEsquina (av,ca)
			
Comentario: { }
```