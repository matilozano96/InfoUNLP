program actividad5;
Type
  // Arbol de participantes
  participante = Record
               cod: integer;
               codC: integer;
               edad: integer;
  end;
  arbol= ^nodoA;
  nodoA = Record
    dato: participante;
    HI: arbol;
    HD: arbol;
  End;

  procedure Insertar(var a: arbol; dato: participante);
begin
 if (a = nil) then begin
 new(a);
a^.dato:= dato;
a^.HI:= nil;
a^.HD:= nil;
 end
 else
 if (a^.dato.cod > dato.cod) then
	Insertar(a^.HI, dato)
 else if (a^.dato.cod < dato.cod) then
	Insertar (a^.HD, dato);
end;

// CREAR ABB
procedure crearABB (var a: arbol);
var p: participante;
begin
	write('Codigo de Ciudad: ');
	readln(p.codC);
	while (p.codC > -1) do begin
        write('Codigo de Participante: ');
        readln(p.cod);
        write('Edad: ');
        readln(p.edad);
		Insertar(a, p);
        writeln();
		write('Codigo de Ciudad: ');
		readln(p.codC);
	end;
end;

procedure ImprimirABB(a: arbol);
begin
     if (a <> nil) then begin
         ImprimirABB(a^.HI);
         writeln('-------------');
         writeln('Participante: ', a^.dato.cod);
         writeln('Edad: ', a^.dato.edad);
         writeln('Ciudad: ', a^.dato.codC);
         writeln('-------------');
         ImprimirABB(a^.HD);
     end;
end;

var a: arbol;
    ciudad: integer;
begin
     a:= nil;
     crearABB(a);
     ImprimirABB(a);

end.