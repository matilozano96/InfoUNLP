program listaConRecursion;

type
	lista = ^nodo;
        nodo = record
            dato : integer;
            sig : lista;
        end;
        
procedure imprimirEnOrden(l: lista);
begin
	if (l <> nil) then begin
		write(l^.dato, ' ');
		imprimirEnOrden(l^.sig);
	end;
end;

procedure imprimirInverso(l: lista);
begin
	if (l <> nil) then begin
		imprimirEnOrden(l^.sig);
		write(l^.dato, ' ');
	end;
end;

procedure agregarAtras (n: integer; var l,ult: lista);
    var nuevo: lista;
    begin
        new(nuevo);
        nuevo^.dato:= n;
        if (l = nil) then begin
            l:= nuevo;
            ult:= l;
        end
        else begin 
            ult^.sig:= nuevo;
            ult:= ult^.sig;
        end;
    end;
    
function max(l: lista): integer;
var temp: integer;
begin
	if (l <> nil) then begin
		temp:= max(l^.sig);
		if (l^.dato > temp) then max:= l^.dato
		else max:= temp;
	end
	else max:= -9999;
end;

function min(l: lista): integer;
var temp: integer;
begin
	if (l <> nil) then begin
		temp:= min(l^.sig);
		if (l^.dato < temp) then min:= l^.dato
		else min:= temp;
	end
	else min:= 9999;
end;

function buscar(l: lista; n: integer): boolean;
begin
	if (l = nil) then buscar:= false
	else if (l^.dato = n) then buscar:= true
	else buscar:= buscar(l^.sig, n);
end;
        
var l, ult: lista;
	i: integer;
	b: integer;
BEGIN
	l:= nil;
	ult:= nil;
	randomize;
	b:= random(100);
	for i:= 1 to 20 do agregarAtras(random(100), l, ult);
	
	imprimirEnOrden(l);
	writeln();
	imprimirInverso(l);
	writeln();
	writeln();
	
	writeln('Max es ', max(l));
	writeln('Min es ', min(l));
	writeln();
	
	writeln('Se va a buscar ', b);
	if buscar(l, b) then writeln('Encontrado')
	else writeln('No encontrado');
END.