Program arboles;
Type

  // Arbol de enteros
  arbol= ^nodoA;
  nodoA = Record
    dato: integer;
    HI: arbol;
    HD: arbol;
  End;

  // Lista de Arboles PARA IMPRIMIRPORNIVEL
  listaNivel = ^nodoN;
  nodoN = record
    info: arbol;
    sig: listaNivel;
  end;




{-------------------MODULOS PARA IMPRIMIRPORNIVEL------------------------------}

// CONTARELEMENTOS - Devuelve la cantidad de elementos de una lista l

function ContarElementos (l: listaNivel): integer;
  var c: integer;
begin
 c:= 0;
 While (l <> nil) do begin
   c:= c+1;
   l:= l^.sig;
 End;
 contarElementos := c;
end;

// Insertar 

procedure Insertar(var a: arbol; dato: integer);
begin
 if (a = nil) then begin
 new(a);
a^.dato:= dato;
a^.HI:= nil;
a^.HD:= nil;
 end
 else
 if (a^.dato > dato) then
	Insertar(a^.HI, dato)
 else if (a^.dato < dato) then
	Insertar (a^.HD, dato);
end;

//  AGREGARATRAS - Agrega un elemento atrï¿½s en l

Procedure AgregarAtras (var l, ult: listaNivel; a:arbol);
 var nue:listaNivel;

 begin
 new (nue);
 nue^.info := a;
 nue^.sig := nil;
 if l= nil then l:= nue
           else ult^.sig:= nue;
 ult:= nue;
 end;


// IMPRIMIRPORNIVEL - Muestra los datos del ï¿½rbol a por niveles

Procedure imprimirpornivel(a: arbol);
var
   l, aux, ult: listaNivel;
   nivel, cant, i: integer;
begin
   l:= nil;
   if(a <> nil)then begin
                 nivel:= 0;
                 agregarAtras (l,ult,a);
                 while (l<> nil) do begin
                    nivel := nivel + 1;
                    cant:= contarElementos(l);
                    write ('Nivel ', nivel, ': ');
                    for i:= 1 to cant do begin
                      write (l^.info^.dato, ' - ');
                      if (l^.info^.HI <> nil) then agregarAtras (l,ult,l^.info^.HI);
                      if (l^.info^.HD <> nil) then agregarAtras (l,ult,l^.info^.HD);
                      aux:= l;
                      l:= l^.sig;
                      dispose (aux);
                     end;
                     writeln;
                 end;
               end;
end;
{-------------------FIN MODULOS PARA IMPRIMIRPORNIVEL-------------------------}

// CREAR ABB, Recibe enteros y los inserta en un arbol binario

procedure crearABB (var a: arbol);
var num: integer;
begin
	write('Insertar numero: ');
	readln(num);
	while (num > 0) do begin
		Insertar(a, num);
		write('Insertar numero: ');
		readln(num);
	end;
end;

// enOrden
procedure enOrden(a: arbol);
begin
     if (a <> nil) then begin
        enOrden(a^.HI);
        write(a^.dato, ' - ');
        enOrden(a^.HD);
    end;
end;

procedure enOrdenDesc(a: arbol);
begin
     if (a <> nil) then begin
        enOrdenDesc(a^.HD);
        write(a^.dato, ' - ');
        enOrdenDesc(a^.HI);
    end;
end;

procedure preorden(a:arbol);
begin
 if (a <> nil) then begin
    write (a^.dato, ' - ');
    preorden(a^.HI);
    preorden(a^.HD);
 end;
end;

procedure postorden(a:arbol);
begin
 if (a <> nil) then begin
    postorden(a^.HI);
    postorden(a^.HD);
    write (a^.dato, ' - ');
 end;
end;

// Buscar
function Buscar (a:arbol; dato: integer):arbol;
begin
 if (a=nil) then
 Buscar:=nil
 else
 if (dato= a^.dato) then Buscar:=a
 else
 if (dato < a^.dato) then
 Buscar:=Buscar(a^.HI ,dato)
 else
 Buscar:=Buscar(a^.HD ,dato);
end;

// MinMax
function verMin(a: arbol): integer;
begin
     if (a = nil) then verMin:= -1
     else begin
          if (a^.HI = nil) then verMin:= a^.dato
          else verMin:= verMin(a^.HI);
     end;
end;

function verMax(a: arbol): integer;
var temp: integer;
begin
     if (a = nil) then verMax:= -1
     else begin
          if (a^.HD = nil) then verMax:= a^.dato
          else verMax:= verMax(a^.HD);
     end;
end;


{PROGRAMA PRINCIPAL}
var a, temp: arbol;
    num: integer;
begin
a:= nil;
Randomize;

crearABB(a);
ImprimirPorNivel(a);
writeln();
enOrden(a);
writeln();
enOrdenDesc(a);
writeln();
preOrden(a);
writeln();
postOrden(a);
writeln();

write('Valor a buscar: ');
readln(num);
temp:= Buscar(a, num);

if temp <> nil then writeln('Encontrado')
else writeln('No encontrado');

writeln('Min: ', verMin(a));
writeln('Max: ', verMax(a));

readln(num);
end.