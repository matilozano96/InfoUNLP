Merge 1: Toma dos listas ordenadas y retorna una nueva lista ordenada con los elementos de las otras dos.
```
procedure merge (l1, l2: lista; var nuevo: lista);
var
	min: integer;
begin
	nuevo:= nil;
	minimo(l1, l2, min);	# Compara los primeros valores de las listas l1 y l2 y retorna el menor valor entre ambas. Retorna -999 si las listas estan vacias
	while (min <> -999) do begin
		agregarAtras (nuevo, min);
		minimo(l1,l2, min);
	end;
end;


procedure minimo (var l1, l2: lista; var min: integer);
var
begin
	min := -999;
	if (l1 <> nil) and (l2 <> nil) then
		if (l1^.dato <= l2^.dato) then begin
			min:= l1^.dato;
			l1:= l1^.sig;
		end
		else begin
			min:= l2^.dato;
			l1:= l2^.sig;
		end
	else if (l1 <> nil) and (l2 = nil) then begin
		min:= l1^.dato;
		l1:= l1^.sig;
	end
	else if (l2 <> nil) and (l1 = nil) then begin
		min:= l2^.dato;
		l1:= l2^.sig;
	end;
	# En caso de que todas las condiciones son negativas (es decir, tanto l1 y l2 son nil), retorna -999
end;
```

Merge 2: Toma un VECTOR de listas ordenadas y retorna una lista con todos los elementos. Esto es superior en todo sentido porque es menos codigo, es mas facil de leer y es adaptable a cualquier problema de merge simple. Se podria trabajar de otra manera con el tamano del array (por ejemplo, con una constante global).

Ambas retornan una lista. Deberia ser medianamente facil retornar un arbol. Es cuestion de cambiar el parametro lista y el proc agregarAtras()
Si se precisa complejizar el tipo de dato que maneja minimo, basta con cambiar los tipos y refactorizar minimo. Despues el Agregar tiene que ser acorde (Agregar se encarga de asignar memoria para mas datos)

```
procedure merge (listas: vector; var nuevo: lista);
var
	min: integer;
begin
	nuevo:= nil;
	minimo(listas, min);	# Compara los primeros valores de las listas retorna el menor valor. Retorna -999 si las listas estan vacias
	while (min <> -999) do begin
		agregarAtras (nuevo, min);
		minimo(listas, min);
	end;
end;


procedure minimo (var v: vector; var min: integer);
var i, dim: integer; # Hardcodeo el tamano del array
begin
	minIndex:= -1;
	min := 999;
	for i:= 1 to dim do begin
		if (v[i] <> nil) then if (v[i]^.dato < min) then begin
			min:= v[i]^.dato;
			minIndex:= i;
		end;
	end;
	if (minIndex <> -1) then v[minIndex]:= v[minIndex]^.sig; # modifica el vector para minimo y merge, pero al volver a main se reestablecen los punteros
	# En caso de que todos los valores sean nil, retorna -999, lo cual le permite a merge terminar de operar
end;
```


MERGE ACUMULADOR: Recibe una cantidad x de listas de valores complejos(registros, por ejemplo) y genera otra lista con valores calculados a partir del analisis de la informacion de las otras listas. Requiere que las listas esten ordenadas por algun criterio relevante.

Por ejemplo. Recibir dos listas de transacciones ordenadas por cliente, una lista para cada sucursal. Reformular eso en una lista o un arbol que indique el gasto total de cada cliente, ordenada por gasto.

El hecho de que cada lista este ordenada por cliente da una pauta de que analizar primero. En este caso, el nodo que tenga el menor cliente de ente ambas listas (ya que el mayor puede estar mas adelante en la otra lista).

Se anota el id, se inicializa en 0, se suma el monto.
Se pasa al siguiente elemento de la lista elegida

Se vuelve a evaluar. Si el menor entre ambos coincide con el cliente previo, se repite el loop anterior. Caso contrario, se carga el dato en la nueva lista y se reinicia: se asigna un nuevo id, se inicializa en 0, se suma el monto.

No olvidar considerar casos en que las listas esten vacias.

```

type
	CONST = 2;
	transaccion = record
		idCliente: integer;
		monto: real;
	end;
	lista = ^nodo;
	nodo = record
		dato: transaccion;
		sig: lista;
	end;
	arbol = ^.no2;
	no2 = record
		dato = transaccion;
		izq = arbol;
		der = arbol;
	end;
	vector = array [1..CONST] of lista;


procedure mergeAc (listas: vector; var a: arbol);
var
	min: lista;
	nuevoNodo: arbol;
	cur: transaccion;
begin
	curId:= -1;
	a:= nil;
	minimo(listas, min);			# Evalua todas las listas del array, retorna un puntero a la lista con el menor valor
	while (min <> nil) do begin
		cur.idCliente:= min^.dato.idCliente;
		cur.monto:= 0;
		
		# Dudo de si esta expresion no puede generar errores. Depende de si se evalua la segunda condicion cuando la primera ya es falsa.
		while ((min <> nil) and (min^.dato.idCliente = cur.idCliente)) do begin 
			cur.monto:= cur.monto + min^.dato.monto;
			minimo (listas, min);		# Vuelve a evaluar. Si min es nil quiere decir que se termino de evaluar todas las listas
		end;
		agregarArbol(a, cur);
	end;
end;

procedure minimo (var v: vector; var min: lista);
var i, dim: integer; # Hardcodeo el tamano del array
begin
	min:= nil;
	minId:= 99999;
	for i:= 1 to CONST do begin
		if (v[i] <> nil) then if (v[i]^.dato.idCliente < minId) then begin
			min:= v[i];
			minId:= min^.dato.idCliente;
		end;
	end;
	if (min <> nil) then v[minId]:= v[minId]^.sig;  # Actualiza el puntero de la lista elegida, si lo hay.
end;

# Agrega al arbol ordenando por monto total
procedure agregarArbol (var a: arbol; elem: transaccion);
var nuevoArbol: arbol;
begin
	if a = nil then begin
		new(nuevoArbol);
		nuevoArbol^.dato:= elem;
	end;
	else begin
		if elem.monto < a^.dato.monto then agregarArbol(a^.izq, elem)
		else agregarArbol(a^.der, elem);
	end;
end;
```


Merge acumulador sacado de clase
- Trabaja con un vector de listas
- Del primer elemento de cada lista en el vector, retorna la lista con el valor minimo y un dato nombre en el nodo.
- Ese dato nombre se usa para acumular y agregar en una lista nueva.
```
procedure agregarAtras(var l:lista;var ult:lista; nom:string;cost:real);
var
  nuevo:lista;
begin
  new(nuevo);
  nuevo^.dato.nombre:=nom;
  nuevo^.dato.costo:=cost;
  nuevo^.sig:=nil;
  if (l = nil) then
		l:=nuevo
  else
		ult^.sig:=nuevo;
  ult:=nuevo;
end;

procedure minimo (var v:vecL; var nomMin:string; var costo:real);
var
  indiceMin,i:integer;
begin
  nomMin:= 'ZZZ'; indiceMin:= -1;
  for i:= 1 to dimF do 
    if(v[i]<>nil)then 
      if(v[i]^.dato.nombre<nomMin)then begin
        indiceMin:=i;
        nomMin:=v[i]^.dato.nombre;
      end;
  if(indiceMin <> -1)then begin
    nomMin:=v[indiceMin]^.dato.nombre;
    costo:=v[indiceMin]^.dato.costo;
    v[indiceMin]:=v[indiceMin]^.sig;
  end;
end;


procedure merge(v:vecL; var nueva:lista);
var
  nomMin, actual: string;
  monto, mTotal: real;
  ult: lista;
begin
  nueva:= nil;
  minimo (v, nomMin, monto);
  while (nomMin <> 'ZZZ')do begin
    actual:=nomMin;
    mTotal:=0;
    while((nomMin <> 'ZZZ') and (actual=nomMin)) do begin
      mTotal:= mTotal + monto;
      minimo(v, nomMin, monto);
    end;
    agregarAtras(nueva, ult, actual, mTotal);
  end;
end;

```
